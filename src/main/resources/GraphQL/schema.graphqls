type Query {
    getCaregiverData(id: ID): Caregiver
}

type Mutation {
    newCaregiver(
        firstName: String
        lastName: String
        email: String
        phoneNumber: Int
        address: String
        zipcode: String
        city: String
    ): Caregiver
    updateLayout(
        data: [layoutInput]): [Layout]
}

input layoutInput {
    i: String
    #type: String
    x: Int
    y: Int
    w: Int
    h: Int
    minW: Int
    maxW: Int
    moved: Boolean
    static: Boolean
    __typename: String
}

type Caregiver {
    id: ID
    firstName: String
    lastName: String
    email: String
    phoneNumber: Int
    address: String
    zipcode: String
    city: String
    animals: [Animal]
    layout: [Layout]
}

type Veterinarian {
    id: ID
    practiceName: String
    email: String
    phoneNumber: Int
    address: String
    zipcode: String
    city: String
    animals: [Animal]
    treatments: [Treatment]
}

type Treatment {
    id: ID
    # date: Date
    weight: Float
    treatmentDescription: String
    medication: String
    vaccine: String
    status: TreatmentStatus
    remark: String
    veterinarian: Veterinarian
    animal: Animal
}

enum TreatmentStatus {
    PLANNED
    DONE
    SKIPPED
}

type Layout {
    id:ID
    i: String
    #type: String
    x: Int
    y: Int
    w: Int
    h: Int
    minW: Int
    maxW: Int
    __typename: String
    moved: Boolean
    static: Boolean
}

type Animal {
    id: ID
    name: String
    species: Species
    race: String
    colour: String
    notableFeatures: String
    # birthDate: Date
    gender: Gender
    # weight
    transponder: Transponder
    caregivers: [Caregiver!]
    veterinarian: Veterinarian
    treatments: [Treatment]
}

type Transponder {
    id: ID
    # implementationDate: Date
    transponderLocation: String
    transponderCode: Int
}

enum Gender {
    MALE
    FEMALE
    MALE_CASTRATED
    FEMALE_STERILISED
}

enum Species {
    DOG
    CAT
}
